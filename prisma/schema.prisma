// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  name      String
  imageUrl  String  @db.Text
  email     String  @db.Text

  memberships Membership[]
  sentFriends Friendship[] @relation("sentFriends")
  receivedFriends Friendship[] @relation("receivedFriends")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id          String     @id @default(uuid())
  name        String
  description String?
  memberships Membership[]
}

model Membership {
  id          String     @id @default(uuid()) 
  profileId   String
  channelId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  @@unique([profileId, channelId]) // Ensures a user can join a channel only once
  @@index([profileId])
  @@index([channelId])
}

model Friendship {
  id          String     @id @default(uuid())
  senderId    String
  receiverId  String
  sender      Profile     @relation("sentFriends", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    Profile     @relation("receivedFriends", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId]) // Ensures unique friendships
  @@index([senderId])
  @@index([receiverId])
}


